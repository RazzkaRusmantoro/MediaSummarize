{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/speci/Music/MediaSummarize/client/src/utils/supabase/server.ts"],"sourcesContent":["\r\nimport { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nexport async function createClient() {\r\n    const cookieStore = await cookies()\r\n  \r\n    // Create a server's supabase client with newly configured cookie,\r\n    // which could be used to maintain user's session\r\n    return createServerClient(\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n      {\r\n        cookies: {\r\n          getAll() {\r\n            return cookieStore.getAll()\r\n          },\r\n          setAll(cookiesToSet) {\r\n            try {\r\n              cookiesToSet.forEach(({ name, value, options }) =>\r\n                cookieStore.set(name, value, options)\r\n              )\r\n            } catch(error) {\r\n              console.error(\r\n                \"Error setting cookies in Supabase server client:\",\r\n                error\r\n              );\r\n            }\r\n          },\r\n        },\r\n      }\r\n    )\r\n  }"],"names":[],"mappings":";;;AACA;AACA;AADA;;;AAGO,eAAe;IAClB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,kEAAkE;IAClE,iDAAiD;IACjD,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM,OAAO;oBACb,QAAQ,KAAK,CACX,oDACA;gBAEJ;YACF;QACF;IACF;AAEJ"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/speci/Music/MediaSummarize/client/src/app/auth/confirm/route.ts"],"sourcesContent":["import { type EmailOtpType } from '@supabase/supabase-js'\r\nimport { type NextRequest, NextResponse } from 'next/server'\r\n\r\nimport { createClient } from '@/utils/supabase/server'\r\n\r\n// Creating a handler to a GET request to route /auth/confirm\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url)\r\n  const token_hash = searchParams.get('token_hash')\r\n  const type = searchParams.get('type') as EmailOtpType | null\r\n  const next = '/login'\r\n\r\n  // Create redirect link without the secret token\r\n  const redirectTo = request.nextUrl.clone()\r\n  redirectTo.pathname = next\r\n  redirectTo.searchParams.delete('token_hash')\r\n  redirectTo.searchParams.delete('type')\r\n\r\n  if (token_hash && type) {\r\n    const supabase = await createClient()\r\n\r\n    const { error } = await supabase.auth.verifyOtp({\r\n      type,\r\n      token_hash,\r\n    })\r\n    if (!error) {\r\n      redirectTo.searchParams.delete('next')\r\n      return NextResponse.redirect(redirectTo)\r\n    }\r\n  }\r\n\r\n  // return the user to an error page with some instructions\r\n  redirectTo.pathname = '/error'\r\n  return NextResponse.redirect(redirectTo)\r\n}"],"names":[],"mappings":";;;AACA;AAEA;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,aAAa,aAAa,GAAG,CAAC;IACpC,MAAM,OAAO,aAAa,GAAG,CAAC;IAC9B,MAAM,OAAO;IAEb,gDAAgD;IAChD,MAAM,aAAa,QAAQ,OAAO,CAAC,KAAK;IACxC,WAAW,QAAQ,GAAG;IACtB,WAAW,YAAY,CAAC,MAAM,CAAC;IAC/B,WAAW,YAAY,CAAC,MAAM,CAAC;IAE/B,IAAI,cAAc,MAAM;QACtB,MAAM,WAAW,MAAM,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAElC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,SAAS,CAAC;YAC9C;YACA;QACF;QACA,IAAI,CAAC,OAAO;YACV,WAAW,YAAY,CAAC,MAAM,CAAC;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;QAC/B;IACF;IAEA,0DAA0D;IAC1D,WAAW,QAAQ,GAAG;IACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;AAC/B"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}