{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/utils/supabase/middleware.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { NextResponse, type NextRequest } from \"next/server\";\r\n\r\nexport async function updateSession(request: NextRequest) {\r\n\r\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\r\n    console.log('Supabase URL or Anon Key not found');\r\n    return;\r\n  }\r\n  \r\n  let supabaseResponse = NextResponse.next({\r\n    request,\r\n  });\r\n\r\n\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return request.cookies.getAll();\r\n        },\r\n        setAll(cookiesToSet) {\r\n          cookiesToSet.forEach(({ name, value }) =>\r\n            request.cookies.set(name, value)\r\n          );\r\n          supabaseResponse = NextResponse.next({\r\n            request,\r\n          });\r\n          cookiesToSet.forEach(({ name, value, options }) =>\r\n            supabaseResponse.cookies.set(name, value, options)\r\n          );\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: { user },\r\n  } = await supabase.auth.getUser()\r\n\r\n  if (\r\n    !user &&\r\n    request.nextUrl.pathname !== '/' &&\r\n    !request.nextUrl.pathname.startsWith('/login') &&\r\n    !request.nextUrl.pathname.startsWith('/auth') &&\r\n    !request.nextUrl.pathname.startsWith('/register') &&\r\n    !request.nextUrl.pathname.startsWith('/confirm')\r\n  ) {\r\n    // no user, potentially respond by redirecting the user to the login page\r\n    const url = request.nextUrl.clone()\r\n    url.pathname = '/login'\r\n    return NextResponse.redirect(url)\r\n  }\r\n  \r\n  return supabaseResponse;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AADA;;;AAGO,eAAe,cAAc,OAAoB;IAEtD,uCAAyF;;IAGzF;IAEA,IAAI,mBAAmB,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvC;IACF;IAGA,MAAM,WAAW,CAAA,GAAA,yKAAA,CAAA,qBAAkB,AAAD,sUAGhC;QACE,SAAS;YACP;gBACE,OAAO,QAAQ,OAAO,CAAC,MAAM;YAC/B;YACA,QAAO,YAAY;gBACjB,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GACnC,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM;gBAE5B,mBAAmB,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACnC;gBACF;gBACA,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,iBAAiB,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO;YAE9C;QACF;IACF;IAGF,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE/B,IACE,CAAC,QACD,QAAQ,OAAO,CAAC,QAAQ,KAAK,OAC7B,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aACrC,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,YACrC,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,gBACrC,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aACrC;QACA,yEAAyE;QACzE,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG;QACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO;AACT"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { type NextRequest } from 'next/server'\r\nimport { updateSession } from '@/utils/supabase/middleware'\r\n\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  // update user's auth session\r\n  return await updateSession(request)\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * Feel free to modify this pattern to include more paths.\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\r\n  ],\r\n}"],"names":[],"mappings":";;;;AACA;;AAGO,eAAe,WAAW,OAAoB;IACnD,6BAA6B;IAC7B,OAAO,MAAM,CAAA,GAAA,sIAAA,CAAA,gBAAa,AAAD,EAAE;AAC7B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}